package nl.ebpi.microservices.auth;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.eventbus.EventBus;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.auth.AuthProvider;
import io.vertx.ext.auth.jdbc.JDBCAuth;
import io.vertx.ext.jdbc.JDBCClient;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Authentication service which authenticate user against database
 */
public class JDBCAuthService extends AbstractVerticle {
    private final static Logger LOGGER = Logger.getLogger(JDBCAuthService.class.getName());
    private AuthProvider authProvider;

    @Override
    public void start() throws Exception {
        initializeUsers();
        EventBus eventBus = vertx.eventBus();
        setJDBCAuthProvider();
        eventBus.consumer("login-address", message -> {

            LOGGER.info("authenticate with message ["+message.body()+"]");

            JsonObject user = (JsonObject) message.body();
            authProvider.authenticate(user, (res) -> {
                LOGGER.info("authenticate as ["+user.getString("username")+"]");
                if (res.succeeded()) {
                    message.reply("succeed");
                } else {
                    message.reply("failed");
                }

            });

        });

        LOGGER.info(String.format("%s is up and running.", JDBCAuthService.class.getName()));
    }

    private void setJDBCAuthProvider() {
        JDBCClient client = JDBCClient.createShared(vertx, new JsonObject()
                .put("url", "jdbc:hsqldb:mem:test?shutdown=true")
                .put("driver_class", "org.hsqldb.jdbcDriver"));
        // Simple auth service which uses a JDBC data source
        authProvider = JDBCAuth.create(client);
    }

    private void initializeUsers() {
        try {
            Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:test?shutdown=true");
            executeStatement("drop table if exists user;", conn);
            executeStatement("drop table if exists user_roles;", conn);
            executeStatement("drop table if exists roles_perms;", conn);
            executeStatement("create table user (user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, username varchar(255), password varchar(255), password_salt varchar(255) );", conn);

            executeStatement("create table user_roles (username varchar(255), role varchar(255));", conn);
            executeStatement("create table roles_perms (role varchar(255), perm varchar(255));", conn);

            executeStatement("insert into user values (1, 'tim', 'EC0D6302E35B7E792DF9DA4A5FE0DB3B90FCAB65A6215215771BF96D498A01DA8234769E1CE8269A105E9112F374FDAB2158E7DA58CDC1348A732351C38E12A0', 'C59EB438D1E24CACA2B1A48BC129348589D49303858E493FBE906A9158B7D5DC');", conn);
            executeStatement("insert into user_roles values ('tim', 'dev');", conn);
            executeStatement("insert into user_roles values ('tim', 'admin');", conn);
            executeStatement("insert into roles_perms values ('dev', 'commit_code');", conn);
            executeStatement("insert into roles_perms values ('dev', 'eat_pizza');", conn);
            executeStatement("insert into roles_perms values ('admin', 'merge_pr');", conn);
            executeStatement("select user from user ", conn);

        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Failed to initialize database");
            vertx.close();
        }
    }


    private void executeStatement(String sql, Connection conn) throws SQLException {
        conn.createStatement().execute(sql);
    }
}