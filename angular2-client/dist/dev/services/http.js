// TODO make string an optional parameter with ''?''
exports.$http = {
    get: function (url, token) {
        return _sendRequest(url, null, 'GET', token);
    },
    post: function (url, payload, token) {
        return _sendRequest(url, payload, 'POST', token);
    },
    put: function (url, payload, token) {
        return _sendRequest(url, payload, 'PUT', token);
    },
    delete: function (url, payload, token) {
        return _sendRequest(url, null, 'DELETE', token);
    }
};
function _sendRequest(url, payLoad, type, token) {
    return new Promise(function (resolve, reject) {
        var req = new XMLHttpRequest();
        req.open(type, url);
        if (payLoad && (typeof payLoad !== "string")) {
            req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        }
        else {
            req.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
        }
        if (token && token !== null) {
            req.setRequestHeader("Authorization", "Bearer " + token);
        }
        req.onload = function () {
            if (req.status == 200) {
                if (req.response.startsWith("{")) {
                    resolve(JSON.parse(req.response));
                }
                else {
                    resolve(req.response);
                }
            }
            else {
                reject(JSON.parse(req.response));
            }
        };
        req.onerror = function () {
            reject(req.response);
        };
        if (payLoad) {
            req.send(JSON.stringify(payLoad));
        }
        else {
            req.send(null);
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2h0dHAudHMiXSwibmFtZXMiOlsiX3NlbmRSZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFDQSxvREFBb0Q7QUFFdkMsYUFBSyxHQUFHO0lBQ2pCLEdBQUcsRUFBRSxVQUFTLEdBQVcsRUFBRSxLQUFhO1FBQ3BDLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUNELElBQUksRUFBRSxVQUFTLEdBQVcsRUFBRSxPQUFZLEVBQUUsS0FBYTtRQUNuRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDRCxHQUFHLEVBQUUsVUFBUyxHQUFXLEVBQUUsT0FBWSxFQUFFLEtBQWE7UUFDbEQsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0QsTUFBTSxFQUFFLFVBQVMsR0FBVyxFQUFFLE9BQVksRUFBRSxLQUFhO1FBQ3JELE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNKLENBQUE7QUFNRCxzQkFBc0IsR0FBVyxFQUFFLE9BQVksRUFBRSxJQUFZLEVBQUUsS0FBYTtJQUN4RUEsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7UUFDdkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztRQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUdwQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsR0FBRyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQzdELENBQUM7UUFFRCxHQUFHLENBQUMsTUFBTSxHQUFHO1lBQ1QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFCLENBQUM7WUFDTCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLEdBQUcsQ0FBQyxPQUFPLEdBQUc7WUFDVixNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQztRQUVGLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDVixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUM7SUFDTCxDQUFDLENBQUNBLENBQUNBO0FBQ1BBLENBQUNBIiwiZmlsZSI6InNlcnZpY2VzL2h0dHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIFRPRE8gbWFrZSBzdHJpbmcgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHdpdGggJyc/JydcblxuZXhwb3J0IGNvbnN0ICRodHRwID0ge1xuICAgIGdldDogZnVuY3Rpb24odXJsOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIF9zZW5kUmVxdWVzdCh1cmwsIG51bGwsICdHRVQnLCB0b2tlbik7XG4gICAgfSxcbiAgICBwb3N0OiBmdW5jdGlvbih1cmw6IHN0cmluZywgcGF5bG9hZDogYW55LCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBfc2VuZFJlcXVlc3QodXJsLCBwYXlsb2FkLCAnUE9TVCcsIHRva2VuKTtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwgdG9rZW46IHN0cmluZykge1xuICAgICAgICByZXR1cm4gX3NlbmRSZXF1ZXN0KHVybCwgcGF5bG9hZCwgJ1BVVCcsIHRva2VuKTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24odXJsOiBzdHJpbmcsIHBheWxvYWQ6IGFueSwgdG9rZW46IHN0cmluZykge1xuICAgICAgICByZXR1cm4gX3NlbmRSZXF1ZXN0KHVybCwgbnVsbCwgJ0RFTEVURScsIHRva2VuKTtcbiAgICB9XG59XG5cbi8qKlxuKiBAcGFyYW0gcGF5bG9hZCBpcyBhIEphdmFTY3JpcHQvSlNPTiBPYmplY3RcbiogQHBhcmFtIHR5cGUgaXMgdGhlIEhUVFAgdmVyYiBhcyBTdHJpbmdcbiovXG5mdW5jdGlvbiBfc2VuZFJlcXVlc3QodXJsOiBzdHJpbmcsIHBheUxvYWQ6IGFueSwgdHlwZTogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxLm9wZW4odHlwZSwgdXJsKTtcblxuICAgICAgICAvLyBzdXBwb3J0IGZvciBjb250ZW50LXR5cGUgaW5mZXJlbmNlIGFuZCBoYW5kbGluZyBhY2NvcmRpbmdseVxuICAgICAgICBpZiAocGF5TG9hZCAmJiAodHlwZW9mIHBheUxvYWQgIT09IFwic3RyaW5nXCIpKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlbmQgSnNvbiBXZWIgVG9rZW5cbiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXEub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJlc3BvbnNlLnN0YXJ0c1dpdGgoXCJ7XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoSlNPTi5wYXJzZShyZXEucmVzcG9uc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlcS5yZXNwb25zZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHBheUxvYWQpIHtcbiAgICAgICAgICAgIHJlcS5zZW5kKEpTT04uc3RyaW5naWZ5KHBheUxvYWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcS5zZW5kKG51bGwpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=