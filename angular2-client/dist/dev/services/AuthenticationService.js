var http_1 = require("services/http");
var AuthenticationService = (function () {
    function AuthenticationService() {
        if (localStorage.getItem('jwt')) {
            this.loggedIn = true;
        }
        else {
            this.loggedIn = false;
        }
        console.log("AuthenticationService constructed with loggedIn [" + this.loggedIn + "] based on localStorage");
    }
    AuthenticationService.prototype.isLoggedIn = function () {
        return this.loggedIn;
    };
    AuthenticationService.prototype.logIn = function (token) {
        console.log("AuthenticationService logIn (set jwt in localStorage and this.loggedIn as true)");
        localStorage.setItem("jwt", token);
        this.loggedIn = true;
    };
    AuthenticationService.prototype.logOut = function () {
        console.log("AuthenticationService logOut (remove jwt from localStorage)");
        localStorage.removeItem('jwt');
        this.loggedIn = false;
    };
    AuthenticationService.prototype.getExpireTimestamp = function (token) {
        var tokenArr = token.split(".");
        console.log("middle section of token is " + tokenArr[1]);
        var decodedMeta = this.base64Decode(tokenArr[1]);
        console.log("decoded middle section of token is " + decodedMeta);
        var jsonMeta = JSON.parse(decodedMeta);
        console.log("jsonMeta of middle section of token is " + jsonMeta);
        return jsonMeta.exp * 1000;
    };
    AuthenticationService.prototype.getNewToken = function (username, password) {
        return http_1.$http.get("http://localhost:8080/api/newToken?username=" + username + "&password=" + password, null);
    };
    AuthenticationService.prototype.base64Decode = function (s) {
        var e = {}, i, b = 0, c, x, l = 0, a, r = '', w = String.fromCharCode, L = s.length;
        var A = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (i = 0; i < 64; i++) {
            e[A.charAt(i)] = i;
        }
        for (x = 0; x < L; x++) {
            c = e[s.charAt(x)];
            b = (b << 6) + c;
            l += 6;
            while (l >= 8) {
                ((a = (b >>> (l -= 8)) & 0xff) || (x < (L - 2))) && (r += w(a));
            }
        }
        return r;
    };
    return AuthenticationService;
})();
exports.AuthenticationService = AuthenticationService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL0F1dGhlbnRpY2F0aW9uU2VydmljZS50cyJdLCJuYW1lcyI6WyJBdXRoZW50aWNhdGlvblNlcnZpY2UiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuY29uc3RydWN0b3IiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuaXNMb2dnZWRJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dJbiIsIkF1dGhlbnRpY2F0aW9uU2VydmljZS5sb2dPdXQiLCJBdXRoZW50aWNhdGlvblNlcnZpY2UuZ2V0RXhwaXJlVGltZXN0YW1wIiwiQXV0aGVudGljYXRpb25TZXJ2aWNlLmdldE5ld1Rva2VuIiwiQXV0aGVudGljYXRpb25TZXJ2aWNlLmJhc2U2NERlY29kZSJdLCJtYXBwaW5ncyI6IkFBQUEscUJBQW9CLGVBQWUsQ0FBQyxDQUFBO0FBRXBDO0lBSUlBO1FBQ0lDLEVBQUVBLENBQUFBLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN6QkEsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDSkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDMUJBLENBQUNBO1FBQ0RBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLG1EQUFtREEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EseUJBQXlCQSxDQUFDQSxDQUFDQTtJQUNqSEEsQ0FBQ0E7SUFFREQsMENBQVVBLEdBQVZBO1FBQ0lFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUVERixxQ0FBS0EsR0FBTEEsVUFBTUEsS0FBVUE7UUFDWkcsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsaUZBQWlGQSxDQUFDQSxDQUFDQTtRQUMvRkEsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDbkNBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUVESCxzQ0FBTUEsR0FBTkE7UUFDSUksT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsNkRBQTZEQSxDQUFDQSxDQUFDQTtRQUMzRUEsWUFBWUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBO0lBQzFCQSxDQUFDQTtJQUVESixrREFBa0JBLEdBQWxCQSxVQUFtQkEsS0FBYUE7UUFDNUJLLElBQUlBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2hDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSw2QkFBNkJBLEdBQUdBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EscUNBQXFDQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUNqRUEsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFDdkNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLHlDQUF5Q0EsR0FBR0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDbEVBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO0lBQy9CQSxDQUFDQTtJQU1ETCwyQ0FBV0EsR0FBWEEsVUFBWUEsUUFBZ0JBLEVBQUVBLFFBQWdCQTtRQUMxQ00sTUFBTUEsQ0FBQ0EsWUFBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsOENBQThDQSxHQUFHQSxRQUFRQSxHQUFHQSxZQUFZQSxHQUFHQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNoSEEsQ0FBQ0E7SUFFT04sNENBQVlBLEdBQXBCQSxVQUFxQkEsQ0FBU0E7UUFDMUJPLElBQUlBLENBQUNBLEdBQUNBLEVBQUVBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLENBQUNBLEVBQUNBLENBQUNBLEVBQUNBLENBQUNBLEdBQUNBLEVBQUVBLEVBQUNBLENBQUNBLEdBQUNBLE1BQU1BLENBQUNBLFlBQVlBLEVBQUNBLENBQUNBLEdBQUNBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBO1FBQy9EQSxJQUFJQSxDQUFDQSxHQUFDQSxrRUFBa0VBLENBQUNBO1FBQ3pFQSxHQUFHQSxDQUFBQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxFQUFDQSxDQUFDQSxHQUFDQSxFQUFFQSxFQUFDQSxDQUFDQSxFQUFFQSxFQUFDQSxDQUFDQTtZQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUFBQSxDQUFDQTtRQUNwQ0EsR0FBR0EsQ0FBQUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsRUFBQ0EsQ0FBQ0EsRUFBRUEsRUFBQ0EsQ0FBQ0E7WUFDYkEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQUEsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFBQUEsQ0FBQ0EsSUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDakNBLE9BQU1BLENBQUNBLElBQUVBLENBQUNBLEVBQUNBLENBQUNBO2dCQUFBQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxLQUFHQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxJQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUFBQSxDQUFDQTtRQUMvREEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFDTFAsNEJBQUNBO0FBQURBLENBekRBLEFBeURDQSxJQUFBO0FBekRZLDZCQUFxQix3QkF5RGpDLENBQUEiLCJmaWxlIjoic2VydmljZXMvQXV0aGVudGljYXRpb25TZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHskaHR0cH0gZnJvbSBcInNlcnZpY2VzL2h0dHBcIjtcblxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uU2VydmljZSB7XG5cbiAgICBsb2dnZWRJbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnand0JykpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VkSW4gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXV0aGVudGljYXRpb25TZXJ2aWNlIGNvbnN0cnVjdGVkIHdpdGggbG9nZ2VkSW4gW1wiICsgdGhpcy5sb2dnZWRJbiArIFwiXSBiYXNlZCBvbiBsb2NhbFN0b3JhZ2VcIik7XG4gICAgfVxuXG4gICAgaXNMb2dnZWRJbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9nZ2VkSW47XG4gICAgfVxuXG4gICAgbG9nSW4odG9rZW46IGFueSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uU2VydmljZSBsb2dJbiAoc2V0IGp3dCBpbiBsb2NhbFN0b3JhZ2UgYW5kIHRoaXMubG9nZ2VkSW4gYXMgdHJ1ZSlcIik7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiand0XCIsIHRva2VuKTtcbiAgICAgICAgdGhpcy5sb2dnZWRJbiA9IHRydWU7XG4gICAgfVxuXG4gICAgbG9nT3V0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkF1dGhlbnRpY2F0aW9uU2VydmljZSBsb2dPdXQgKHJlbW92ZSBqd3QgZnJvbSBsb2NhbFN0b3JhZ2UpXCIpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnand0Jyk7XG4gICAgICAgIHRoaXMubG9nZ2VkSW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRFeHBpcmVUaW1lc3RhbXAodG9rZW46IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGxldCB0b2tlbkFyciA9IHRva2VuLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJtaWRkbGUgc2VjdGlvbiBvZiB0b2tlbiBpcyBcIiArIHRva2VuQXJyWzFdKTtcbiAgICAgICAgbGV0IGRlY29kZWRNZXRhID0gdGhpcy5iYXNlNjREZWNvZGUodG9rZW5BcnJbMV0pO1xuICAgICAgICBjb25zb2xlLmxvZyhcImRlY29kZWQgbWlkZGxlIHNlY3Rpb24gb2YgdG9rZW4gaXMgXCIgKyBkZWNvZGVkTWV0YSk7XG4gICAgICAgIGxldCBqc29uTWV0YSA9IEpTT04ucGFyc2UoZGVjb2RlZE1ldGEpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImpzb25NZXRhIG9mIG1pZGRsZSBzZWN0aW9uIG9mIHRva2VuIGlzIFwiICsganNvbk1ldGEpO1xuICAgICAgICByZXR1cm4ganNvbk1ldGEuZXhwICogMTAwMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENhbGwgUkVTVCBhcGkgdG8gcmVxdWVzdCBhIEpXVCB0b2tlblxuICAgICogQHJldHVybiBQcm9taXNlIG9iamVjdFxuICAgICovXG4gICAgZ2V0TmV3VG9rZW4odXNlcm5hbWU6IFN0cmluZywgcGFzc3dvcmQ6IFN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoXCJodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL25ld1Rva2VuP3VzZXJuYW1lPVwiICsgdXNlcm5hbWUgKyBcIiZwYXNzd29yZD1cIiArIHBhc3N3b3JkLCBudWxsKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJhc2U2NERlY29kZShzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICB2YXIgZT17fSxpLGI9MCxjLHgsbD0wLGEscj0nJyx3PVN0cmluZy5mcm9tQ2hhckNvZGUsTD1zLmxlbmd0aDtcbiAgICAgICAgdmFyIEE9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgICAgIGZvcihpPTA7aTw2NDtpKyspe2VbQS5jaGFyQXQoaSldPWk7fVxuICAgICAgICBmb3IoeD0wO3g8TDt4Kyspe1xuICAgICAgICAgICAgYz1lW3MuY2hhckF0KHgpXTtiPShiPDw2KStjO2wrPTY7XG4gICAgICAgICAgICB3aGlsZShsPj04KXsoKGE9KGI+Pj4obC09OCkpJjB4ZmYpfHwoeDwoTC0yKSkpJiYocis9dyhhKSk7fVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==